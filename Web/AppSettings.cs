using System;
using System.Configuration;

namespace MediaCommMvc.Web
{
    /// <summary>
    /// This class was generated by the AppSettings T4 template
    /// </summary>
    public static class AppSettings
    {
        public static string webpages_Version { get { return GetConfigSettingItem("webpages:Version"); } }
        public static string webpages_Enabled { get { return GetConfigSettingItem("webpages:Enabled"); } }
        public static string ClientValidationEnabled { get { return GetConfigSettingItem("ClientValidationEnabled"); } }
        public static string UnobtrusiveJavaScriptEnabled { get { return GetConfigSettingItem("UnobtrusiveJavaScriptEnabled"); } }
        public static string elmah_mvc_disableHandler { get { return GetConfigSettingItem("elmah.mvc.disableHandler"); } }
        public static string elmah_mvc_disableHandleErrorFilter { get { return GetConfigSettingItem("elmah.mvc.disableHandleErrorFilter"); } }
        public static string elmah_mvc_requiresAuthentication { get { return GetConfigSettingItem("elmah.mvc.requiresAuthentication"); } }
        public static string elmah_mvc_IgnoreDefaultRoute { get { return GetConfigSettingItem("elmah.mvc.IgnoreDefaultRoute"); } }
        public static string elmah_mvc_allowedRoles { get { return GetConfigSettingItem("elmah.mvc.allowedRoles"); } }
        public static string elmah_mvc_allowedUsers { get { return GetConfigSettingItem("elmah.mvc.allowedUsers"); } }
        public static string elmah_mvc_route { get { return GetConfigSettingItem("elmah.mvc.route"); } }
    
        private const string MISSING_CONFIG = "Invalid configuration. Required AppSettings section is missing";
        private const string INVALID_CONFIG_SETTING = "Invalid configuration setting name: {0}";

        private static string GetConfigSettingItem(string name)
        {
            if (ConfigurationManager.AppSettings == null)
                throw new ConfigurationErrorsException(MISSING_CONFIG);

            string value = null;
            if (ConfigurationManager.AppSettings.Count != 0)
            {
                try
                {
                    value = ConfigurationManager.AppSettings.Get(name);
                }
                catch (Exception exception)
                {
                    throw new ConfigurationErrorsException(SettingItemErrorMessage(name, exception));
                }
            }
            // Older versions of the NETFx doesn't have IsNullOrWhiteSpace
            if (string.IsNullOrEmpty(value))
                throw new ConfigurationErrorsException(SettingItemErrorMessage(name));
            return value;
        }
        
        private static string SettingItemErrorMessage(string name)
        {
            return string.Format(INVALID_CONFIG_SETTING, name);
        }

        private static string SettingItemErrorMessage(string name, Exception exception)
        {
            return string.Format(INVALID_CONFIG_SETTING, name) + exception.Message;
        }
    }
}
